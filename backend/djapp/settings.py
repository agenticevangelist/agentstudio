"""
Django settings for djapp project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env in backend/
load_dotenv(BASE_DIR / '.env')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-v@rq(ejno+z8x(#rlj@h1e0^us)qa&p1etw1=g(s5$0u+l@kuj')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'false').lower() in ('1', 'true', 'yes')

# Hosts and CSRF
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '*').split(',')
CSRF_TRUSTED_ORIGINS = [o for o in os.getenv('CSRF_TRUSTED_ORIGINS', '').split(',') if o]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework', 
    'rest_framework.authtoken',
    'channels',
    'accounts',

    'authx',
    'agents',
    'chat',
    'toolkits',
    'connections',

    'inbox',
]

MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    # Removed Supabase JWT middleware; using Django auth sessions/tokens
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'djapp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djapp.wsgi.application'
# Channels/ASGI entrypoint
ASGI_APPLICATION = 'djapp.asgi.application'

CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOW_CREDENTIALS = True

# Allow CORS from env-provided origins plus localhost defaults
_CORS_ALLOWED_FROM_ENV = [o for o in os.getenv('CORS_ALLOWED_ORIGINS', '').split(',') if o]
CORS_ALLOWED_ORIGINS = list(set(_CORS_ALLOWED_FROM_ENV + [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    'http://localhost:3001',
    'http://127.0.0.1:3001',
]))

# Trust CSRF from env-provided origins plus localhost defaults
CSRF_TRUSTED_ORIGINS = list(set(CSRF_TRUSTED_ORIGINS + [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    'http://localhost:3001',
    'http://127.0.0.1:3001',
]))
# DRF auth: allow session and token
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ]
}
# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Prefer explicit DATABASE_URL; default to provided Render Postgres if not set
DATABASE_URL = os.getenv('DATABASE_URL', 'postgresql://agentstudio_user:UdnyPtBF2vJjDRsRD4XPmWOtld0FI2U2@dpg-d32q67re5dus73b5gtrg-a.oregon-postgres.render.com/agentstudio')
if DATABASE_URL:
    DATABASES = {
        'default': dj_database_url.parse(
            DATABASE_URL,
            conn_max_age=600,
            ssl_require=True,
        )
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# When behind a proxy/Render, honor X-Forwarded-Proto for request.is_secure()
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# ---- Channels / Redis ----
# Use Redis if REDIS_URL is provided; otherwise fallback to in-memory for local dev
REDIS_URL = os.getenv('REDIS_URL', '')

if REDIS_URL:
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                'hosts': [REDIS_URL],
            },
        }
    }
else:
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels.layers.InMemoryChannelLayer',
        }
    }

# Supabase settings removed; migrating to Django auth
SUPABASE_PROJECT_URL = ''
SUPABASE_JWKS_URL = ''
SUPABASE_ANON_KEY = ''
SUPABASE_SERVICE_ROLE_KEY = ''

# Placeholders for later features
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', '')
COMPOSIO_API_KEY = os.getenv('COMPOSIO_API_KEY', '')

# ---- Celery (ambient jobs) ----
# If no broker/backend provided, Celery will still start but tasks won't persist results.
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', REDIS_URL or '')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', REDIS_URL or '')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model (UUID primary key)
AUTH_USER_MODEL = 'accounts.User'

# Dev-only: allow bypassing JWT signature verification to unblock local auth
# WARNING: Do not enable in production
ALLOW_DEV_JWT_NO_VERIFY = os.getenv('ALLOW_DEV_JWT_NO_VERIFY', 'false').lower() in ('1', 'true', 'yes')

# ---- Logging ----
# Make sure our debug logs from modules like `agents` and `connections` appear in the dev server.
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO').upper()

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{levelname}] {asctime} {name}: {message}',
            'style': '{',
        },
        'simple': {
            'format': '[{levelname}] {name}: {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'ERROR',
    },
    'loggers': {
        # Django's own logging
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'WARNING'),
            'propagate': False,
        },
        'django.server': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        # Our apps â€” ensure DEBUG logs show up
        'agents': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'agents.services.agent_setup': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'agents.services.graph_factory': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'connections': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'connections.services.composio_service': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'connections.services.composio_service': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        },
        # Silence third-party noise
        'httpx': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'httpcore': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'composio_client': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        },
    },
}


# --- Agents registry configuration ---
# Maps AgentType values (as strings) to dotted class paths implementing the agent.
# Implementations must accept `(llm, toolkits)` in their constructor.
AGENTS_REGISTRY = {
    'creator': 'agents.services.creator_agent_service.CreatorAgent',
    'chat': 'agents.services.chat_agent_service.ChatAgent',
}
